---
name: Build, and push Docker Image

env:
    OWNER: ${{ github.repository_owner }}

on:
    pull_request:
        paths:
            - .github/workflows/docker.yml
            # We use local reusable workflows to make architecture clean an simple
            # https://docs.github.com/en/actions/using-workflows/reusing-workflows
            - .github/workflows/docker-build-test-upload.yml
            - .github/workflows/docker-merge-tags.yml
            - .github/workflows/docker-push.yml

            # We use local composite actions to combine multiple workflow steps within one action
            # https://docs.github.com/en/actions/creating-actions/about-custom-actions#composite-actions
            - .github/actions/create-dev-env/action.yml
            - .github/actions/load-image/action.yml

            - src/**
            - qe.ipynb
            - setup.cfg
            - pyproject.toml

    push:
        branches:
            - main
        tags:
            - v*
        paths:
            - .github/workflows/docker.yml
            # We use local reusable workflows to make architecture clean an simple
            # https://docs.github.com/en/actions/using-workflows/reusing-workflows
            - .github/workflows/docker-build-test-upload.yml
            - .github/workflows/docker-merge-tags.yml
            - .github/workflows/docker-push.yml

            # We use local composite actions to combine multiple workflow steps within one action
            # https://docs.github.com/en/actions/creating-actions/about-custom-actions#composite-actions
            - .github/actions/create-dev-env/action.yml
            - .github/actions/load-image/action.yml

            - src/**
            - qe.ipynb
            - setup.cfg
            - pyproject.toml
    workflow_dispatch:
    schedule:
      # Periodically build and test the image and keep `edge` always up-to-date
      # Weekly, at 03:00 on Monday UTC time
        - cron: 0 3 * * 1

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
    # only cancel in-progress jobs or runs for the current workflow - matches against branch & tags
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    bake-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repo ‚ö°Ô∏è
              uses: actions/checkout@v3
            - name: Set up Docker Buildx üèó
              uses: docker/setup-buildx-action@v2
            - name: Login to Container Registry üîë
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Docker meta üìù
              id: meta
              uses: docker/metadata-action@v4
              env: ${{ fromJson(steps.build_vars.outputs.vars) }}
              with:
                  images: |
                      name=ghcr.io/${{ env.OWNER }}/qe
                  tags: |
                      type=edge,enable={{is_default_branch}}
                      type=sha,enable=${{ github.ref_type != 'tag' }}
                      type=ref,event=pr
                      type=match,pattern=v(\d{4}\.\d{4}),group=1
                      type=raw,value={{tag}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
                      type=raw,value=qe-${{ env.QE_VERSION }},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            #- name: Build and push image üèóüì§üíæ
            #  id: bake
            #  uses: docker/bake-action@v3.1.0
            #  with:
            #  # Using provenance to disable default attestation so it will build only desired images:
            #  # https://github.com/orgs/community/discussions/45969
            #      provenance: false
            #      files: docker-bake.hcl
            #      push: true
            #  working-directory: docker

#jobs:
#    amd64:
#        uses: ./.github/workflows/docker-build-test-upload.yml
#        with:
#            image: qe
#            architecture: amd64
#            runsOn: ubuntu-latest
#
#    arm64:
#        uses: ./.github/workflows/docker-build-test-upload.yml
#        with:
#            image: qe
#            architecture: arm64
#            runsOn: buildjet-2vcpu-ubuntu-2204-arm
#
#    amd64-push-ghcr:
#        uses: ./.github/workflows/docker-push.yml
#        with:
#            image: qe
#            architecture: amd64
#            registry: ghcr.io
#        secrets:
#            REGISTRY_USERNAME: ${{ github.actor }}
#            REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        needs: [amd64]
#
#    arm64-push-ghcr:
#        uses: ./.github/workflows/docker-push.yml
#        with:
#            image: qe
#            architecture: arm64
#            registry: ghcr.io
#        secrets:
#            REGISTRY_USERNAME: ${{ github.actor }}
#            REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        needs: [arm64]
#
#    merge-tags-ghcr:
#        uses: ./.github/workflows/docker-merge-tags.yml
#        with:
#            image: qe
#            registry: ghcr.io
#        secrets:
#            REGISTRY_USERNAME: ${{ github.actor }}
#            REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        needs: [amd64-push-ghcr, arm64-push-ghcr]
#
#    amd64-push-dockerhub:
#        if: github.repository == 'aiidalab/aiidalab-qe' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
#        uses: ./.github/workflows/docker-push.yml
#        with:
#            image: qe
#            architecture: amd64
#            registry: docker.io
#        secrets:
#            REGISTRY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#            REGISTRY_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
#        needs: [amd64]
#
#    arm64-push-dockerhub:
#        if: github.repository == 'aiidalab/aiidalab-qe' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
#        uses: ./.github/workflows/docker-push.yml
#        with:
#            image: qe
#            architecture: arm64
#            registry: docker.io
#        secrets:
#            REGISTRY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#            REGISTRY_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
#        needs: [arm64]
#
#    merge-tags-dockerhub:
#        if: github.repository == 'aiidalab/aiidalab-qe' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
#        uses: ./.github/workflows/docker-merge-tags.yml
#        with:
#            image: qe
#            registry: docker.io
#        secrets:
#            REGISTRY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#            REGISTRY_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
#        needs: [amd64-push-dockerhub, arm64-push-dockerhub]
#
