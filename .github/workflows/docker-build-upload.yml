---
name: Build and upload Docker image as artifact

env:
    TMP_FOLDER_NAME: ${{ github.repository }}

on:
    workflow_call:
        inputs:
            architecture:
                description: Image architecture, e.g. amd64, arm64
                required: true
                type: string
            runsOn:
                description: GitHub Actions Runner image
                required: true
                type: string
            bakeFile:
                description: Path to the bake file
                required: true
                type: string

jobs:
    build-test-upload:
        runs-on: ${{ inputs.runsOn }}
        continue-on-error: true

        steps:
            - name: Checkout Repo ‚ö°Ô∏è
              uses: actions/checkout@v4
            - name: Create dev environment üì¶
              uses: ./.github/actions/create-dev-env
              with:
                  architecture: ${{ inputs.architecture }}

            # Self-hosted runners share a state (whole VM) between runs
            # Also, they might have running or stopped containers,
            # which are not cleaned up by `docker system prun`
            - name: Reset docker state and cleanup artifacts üóëÔ∏è
              if: ${{ inputs.platform != 'x86_64' }}
              run: |
                  docker kill $(docker ps --quiet) || true
                  docker rm $(docker ps --all --quiet) || true
                  docker system prune --all --force
                  rm -rf /tmp/${{ env.TMP_FOLDER_NAME }}/
              shell: bash

            - name: Build image üõ†
              working-directory: docker
              run: docker buildx bake --set *.platform=linux/${{ inputs.architecture }} -f docker-bake.hcl -f build.json --load
              env:
                  # Use buildx
                  DOCKER_BUILDKIT: 1
                  # Full logs for CI build
                  BUILDKIT_PROGRESS: plain
              shell: bash

            - name: Save images as a tar for later use üíæ
              run: |
                  mkdir -p /tmp/${{ env.TMP_FOLDER_NAME }}
                  grep 'target "' ${{ inputs.bakeFile }} | awk -F'"' '{print $2}' | while read image; do
                      docker save ${{ github.repository_owner }}/$image -o /tmp/${{ env.TMP_FOLDER_NAME }}/$image-${{ inputs.architecture }}.tar
                  done
              shell: bash
              if: always()

            - name: Upload image as artifact üíæ
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ inputs.architecture }}-images
                  path: |
                      /tmp/${{ env.TMP_FOLDER_NAME }}/*.tar
                  retention-days: 3
              if: always()
