---
name: Build Docker image

on:
    pull_request:
    push:
        branches:
            - main
        tags:
            - v*
    workflow_dispatch:

env:
    FORCE_COLOR: 1
    IMAGE_NAME: aiidalab/qe
    BUILDKIT_PROGRESS: plain

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    build-multiarch:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4

            - name: Login to GitHub Container Registry 🔑
              uses: docker/login-action@v2
              if: ${{ !github.event.pull_request.head.repo.fork }}
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Login to DockerHub 🔑
              uses: docker/login-action@v2
              if: ${{ !github.event.pull_request.head.repo.fork }}
              with:
                  registry: docker.io
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Set up QEMU (for cross-building)
              uses: docker/setup-qemu-action@v3
              with:
                  platforms: all

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Docker meta (GHCR) 📝
              id: meta_ghcr
              uses: docker/metadata-action@v5
              with:
                  images: |
                      name=ghcr.io/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=pr
                      type=edge,enable={{is_default_branch}}
                      type=raw,value={{tag}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}

            - name: Docker meta (DockerHub)
              id: meta_dockerhub
              uses: docker/metadata-action@v5
              with:
                  images: docker.io/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=pr
                      type=edge,enable={{is_default_branch}}
                      # type=match,pattern=v(\d+\.\d+(\.\d+)?),group=1
                      type=raw,value={{tag}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      # --- BUILD for AMD64 (Dockerfile) ---
            - name: Build & push amd64 image
              uses: docker/build-push-action@v5
              with:
          # "append: true" means we produce/extend a manifest list.
          # We will append arm64 to the same manifest in the next step.
                  append: true
                  push: ${{ ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}
                  load: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}
                  context: .
                  file: Dockerfile
                  platforms: linux/amd64
                  tags: >
                      ${{ steps.meta_ghcr.outputs.tags }},
                      ${{ steps.meta_dockerhub.outputs.tags }}
                  cache-to: |
                      type=gha,scope=${{ github.workflow }},mode=min
                  cache-from: |
                      type=gha,scope=${{ github.workflow }}

      # --- BUILD for ARM64 (Dockerfile.arm) ---
            - name: Build & push arm64 image
              uses: docker/build-push-action@v5
              with:
                  append: true # Merges into the existing manifest from previous step
                  push: ${{ ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}
                  load: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}
                  context: .
                  file: Dockerfile.arm
                  platforms: linux/arm64
                  tags: >
                      ${{ steps.meta_ghcr.outputs.tags }},
                      ${{ steps.meta_dockerhub.outputs.tags }}
                  cache-to: |
                      type=gha,scope=${{ github.workflow }},mode=min
                  cache-from: |
                      type=gha,scope=${{ github.workflow }}
