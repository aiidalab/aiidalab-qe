"""PDOS results view widgets

"""
import typing as t

from aiidalab_qe.app.panel import ResultPanel

FUNCTIONAL_LINK_MAP = {
    "PBE": "https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.77.3865",
    "PBEsol": "https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.100.136406",
}

PSEUDO_LINK_MAP = {
    "SSSP": "https://www.materialscloud.org/discover/sssp/table/efficiency",
    "PseudoDojo": "http://www.pseudo-dojo.org/",
}

PROTOCOL_PSEUDO_MAP = {
    "fast": "SSSP/1.2/PBE/efficiency",
    "moderate": "SSSP/1.2/PBE/efficiency",
    "precise": "SSSP/1.2/PBE/precision",
}

FUNCTIONAL_REPORT_MAP = {
    "LDA": "local density approximation (LDA)",
    "PBE": "generalized gradient approximation of Perdew-Burke-Ernzerhof (PBE)",
    "PBEsol": "the revised generalized gradient approximation of Perdew-Burke-Ernzerhof (PBE) for solids",
}


def _generate_report_dict(ui_parameters: dict):
    """Read from the bulider parameters and generate a dictionacry
    for reporting the inputs for the `QeAppWorkChain` with proper name corresponding
    to the template.
    """
    # Workflow logic
    yield "relax_method", ui_parameters["relax_type"]
    yield "relaxed", ui_parameters["run_relax"]
    yield "bands_computed", ui_parameters["run_bands"]
    yield "pdos_computed", ui_parameters["run_pdos"]

    # Material settings
    yield "material_magnetic", ui_parameters["spin_type"]
    yield "electronic_type", ui_parameters["electronic_type"]

    # Calculation settings
    yield "protocol", ui_parameters["protocol"]

    # Pseudopotential settings
    yield "pseudo_family", ui_parameters["pseudo_family"]
    yield "pseudo_version", ui_parameters["pseudo_version"]
    yield "pseudo_protocol", ui_parameters["pseudo_protocol"]

    pseudo_library = ui_parameters["pseudo_library"]
    functional = ui_parameters["functional"]
    yield "pseudo_library", pseudo_library
    yield "functional", functional

    yield "pseudo_link", PSEUDO_LINK_MAP[pseudo_library]
    yield "functional_link", FUNCTIONAL_LINK_MAP[functional]

    # Detail calculation parameters
    yield "energy_cutoff_wfc", ui_parameters["energy_cutoff_wfc"]
    yield "energy_cutoff_rho", ui_parameters["energy_cutoff_rho"]
    yield "scf_kpoints_distance", ui_parameters["scf_kpoints_distance"]
    yield "bands_kpoints_distance", ui_parameters["bands_kpoints_distance"]
    yield "nscf_kpoints_distance", ui_parameters["nscf_kpoints_distance"]

    occupation = ui_parameters["occupation"]
    yield "occupation_type", occupation

    if occupation == "smearing":
        yield "degauss", ui_parameters["degauss"]
        yield "smearing", ui_parameters["smearing"]

    yield "tot_charge", ui_parameters["tot_charge"]


def _generate_report_html(report):
    """Read from the bulider parameters and generate a html for reporting
    the inputs for the `QeAppWorkChain`.
    """
    from importlib import resources

    from jinja2 import Environment

    from aiidalab_qe.app import static

    def _fmt_yes_no(truthy):
        return "Yes" if truthy else "No"

    env = Environment()
    env.filters.update(
        {
            "fmt_yes_no": _fmt_yes_no,
        }
    )
    template = resources.read_text(static, "workflow_summary.jinja")
    style = resources.read_text(static, "style.css")

    return env.from_string(template).render(style=style, **report)


def generate_report_html(qeapp_wc):
    """Generate a html for reporting the inputs for the `QeAppWorkChain`"""
    ui_parameters = qeapp_wc.base.extras.get("ui_parameters", {})
    report = dict(_generate_report_dict(ui_parameters))

    return _generate_report_html(report)


def generate_report_text(report_dict):
    """Generate a text for reporting the inputs for the `QeAppWorkChain`

    :param report_dict: dictionary generated by the `generate_report_dict` function.
    """

    report_string = (
        "All calculations are performed within the density-functional "
        "theory formalism as implemented in the Quantum ESPRESSO code. "
        "The pseudopotential for each element is extracted from the "
        f'{report_dict["Pseudopotential library"][0]} '
        "library. The wave functions "
        "of the valence electrons are expanded in a plane wave basis set, using an "
        "energy cutoff equal to "
        f'{round(report_dict["Plane wave energy cutoff (wave functions)"][0])} Ry '
        "for the wave functions and "
        f'{round(report_dict["Plane wave energy cutoff (charge density)"][0])} Ry '
        "for the charge density and potential. "
        "The exchange-correlation energy is "
        "calculated using the "
        f'{FUNCTIONAL_REPORT_MAP[report_dict["Functional"][0]]}. '
        "A Monkhorst-Pack mesh is used for sampling the Brillouin zone, where the "
        "distance between the k-points is set to "
    )
    kpoints_distances = []
    kpoints_calculations = []

    for calc in ("SCF", "NSCF", "Bands"):
        if f"K-point mesh distance ({calc})" in report_dict:
            kpoints_distances.append(
                str(report_dict[f"K-point mesh distance ({calc})"][0])
            )
            kpoints_calculations.append(calc)

    report_string += ", ".join(kpoints_distances)
    report_string += " for the "
    report_string += ", ".join(kpoints_calculations)
    report_string += " calculation"
    if len(kpoints_distances) > 1:
        report_string += "s, respectively"
    report_string += "."

    return report_string


class Result(ResultPanel):
    title = "PDOS"
    workchain_label = "pdos"

    def _update_view(self):
        pass
        # builder = self.qeapp_node.get_builder_restart()
        # parameters = self.qeapp_node.get_extra("ui_parameters", {})
        # Set the builder parameters on the work chain
        # report_parameters = self._extract_report_parameters(builder, parameters)

    @staticmethod
    def _extract_report_parameters(builder, parameters) -> dict[str, t.Any]:
        """Extract (recover) the parameters for report from the builder.

        There are some parameters that are not stored in the builder, but can be extracted
        directly from the widgets, such as the ``pseudo_family`` and ``relax_type``.
        """
        report = {
            "run_relax": "relax" in builder.properties,
            "run_bands": "bands" in builder.properties,
            "run_pdos": "pdos" in builder.properties,
        }

        # Extract the pw calculation parameters from the builder

        # energy_cutoff is same for all pw calculations when pseudopotentials are fixed
        # as well as the smearing settings (semaring and degauss) and scf kpoints distance
        # read from the first pw calculation of relax workflow.
        # It is safe then to extract these parameters from the first pw calculation, since the
        # builder is anyway set with subworkchain inputs even it is not run which controlled by
        # the properties inputs.
        energy_cutoff_wfc = builder.relax.base["pw"]["parameters"]["SYSTEM"]["ecutwfc"]
        energy_cutoff_rho = builder.relax.base["pw"]["parameters"]["SYSTEM"]["ecutrho"]
        occupation = builder.relax.base["pw"]["parameters"]["SYSTEM"]["occupations"]
        scf_kpoints_distance = builder.relax.base.kpoints_distance.value

        report.update(
            {
                "energy_cutoff_wfc": energy_cutoff_wfc,
                "energy_cutoff_rho": energy_cutoff_rho,
                "occupation": occupation,
                "scf_kpoints_distance": scf_kpoints_distance,
            }
        )

        if occupation == "smearing":
            report["degauss"] = builder.relax.base["pw"]["parameters"]["SYSTEM"][
                "degauss"
            ]
            report["smearing"] = builder.relax.base["pw"]["parameters"]["SYSTEM"][
                "smearing"
            ]

        report["bands_kpoints_distance"] = builder.bands.bands_kpoints_distance.value
        report["nscf_kpoints_distance"] = builder.pdos.nscf.kpoints_distance.value

        report["tot_charge"] = builder.relax.base["pw"]["parameters"]["SYSTEM"].get(
            "tot_charge", 0.0
        )

        # report from parameters
        for k, v in parameters.items():
            report.update({k: v})

        return report
